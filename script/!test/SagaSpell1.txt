#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Stage 3 Spell Idea"]
#Text["Saga Kuramu: Wicked Magical Contract"]

#include"script/default_system/Default_ShotConst.txt"
#include"script/default_system/Default_Effect.txt"

let objBoss;
let objBossX;
let objBossY;

@Event { // Boss health and whatnot 
	alternative(GetEventType())
	case(EV_REQUEST_LIFE){
		SetScriptResult(300);
	}
	case(EV_REQUEST_TIMER){
		SetScriptResult(60);
	}
	case(EV_REQUEST_SPELL_SCORE){
		SetScriptResult(3000000);
	}
}

@Initialize {
	objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objBoss);
	ObjEnemy_SetDamageRate(objBoss, 10, 10);

	DeleteShotAll(TYPE_ALL, TYPE_ITEM); //Delete all items upon start of attack

	TMain;
	//TRender;
	TEnd;
}

@MainLoop {
	ObjEnemy_SetIntersectionCircleToShot(objBoss,ObjMove_GetX(objBoss),ObjMove_GetY(objBoss),50);
	ObjEnemy_SetIntersectionCircleToPlayer(objBoss,ObjMove_GetX(objBoss),ObjMove_GetY(objBoss),40);
	objBossX = ObjMove_GetX(objBoss);
	objBossY = ObjMove_GetY(objBoss);
	yield;
}

function wait(n){
	loop(n){yield;}
}

function angleToPlayer(obj){
	let toPlayer = atan2(GetPlayerY-ObjMove_GetY(obj),GetPlayerX-ObjMove_GetX(obj)); // Makes something aim towards the player
	return toPlayer;
}

task TMain {
	while(!Obj_IsDeleted(objBoss)){
		let Tangles = [0,90,180,270];
		let Tangles2;
		let random;
		let letterx = 35;
		let lettery = 20;
		let time = 50;
		loop(7){
			loop(5){			
				Tangles2 = Tangles[round(rand(0,3))]; // Determines what direction the Ts go in

				random = round(rand(1,3)); // Chooses what letter spawns
				CreateLetter(letterx, lettery, time, random); // Spawn the letters
				time += 2;
				letterx += 364/5;
				wait(2);
			}
			letterx = 35;
			lettery += 60;
		}

		task CreateLetter(x, y, time, random) { // This task creates the letters
			let space = 10;

			if(random == 1){ // O
				CreateIndvShot(x + space*2, y - space*2, time);
				CreateIndvShot(x + space, y - space*2, time);
				CreateIndvShot(x, y - space*2, time);
				CreateIndvShot(x - space, y - space*2, time);
				CreateIndvShot(x - space*2, y - space*2, time);

				CreateIndvShot(x + space*2, y - space, time);
				CreateIndvShot(x - space*2, y - space, time);

				CreateIndvShot(x + space*2, y, time);
				CreateIndvShot(x - space*2, y, time);

				CreateIndvShot(x + space*2, y + space, time);
				CreateIndvShot(x - space*2, y + space, time);

				CreateIndvShot(x + space*2, y + space*2, time);
				CreateIndvShot(x + space, y + space*2, time);
				CreateIndvShot(x, y + space*2, time);
				CreateIndvShot(x - space, y + space*2, time);
				CreateIndvShot(x - space*2, y + space*2, time);
			}

			if(random == 2){ // T
				CreateIndvShot(x + space*2, y - space*2, time);
				CreateIndvShot(x + space, y - space*2, time);
				CreateIndvShot(x, y - space*2, time);
				CreateIndvShot(x - space, y - space*2, time);
				CreateIndvShot(x - space*2, y - space*2, time);
				
				CreateIndvShot(x, y - space, time);	

				CreateIndvShot(x, y, time);	

				CreateIndvShot(x, y + space, time);	

				CreateIndvShot(x, y + space*2, time);
			}

			if(random == 3){ // A
				CreateIndvShot(x + space*2, y - space*2, time);
				CreateIndvShot(x + space, y - space*2, time);
				CreateIndvShot(x, y - space*2, time);
				CreateIndvShot(x - space, y - space*2, time);
				CreateIndvShot(x - space*2, y - space*2, time);		
				
				CreateIndvShot(x + space*2, y - space, time);
				CreateIndvShot(x - space*2, y - space, time);

				CreateIndvShot(x + space*2, y, time);
				CreateIndvShot(x + space, y, time);
				CreateIndvShot(x, y, time);
				CreateIndvShot(x - space, y, time);
				CreateIndvShot(x - space*2, y, time);	

				CreateIndvShot(x + space*2, y + space, time);
				CreateIndvShot(x - space*2, y + space, time);

				CreateIndvShot(x + space*2, y + space*2, time);
				CreateIndvShot(x - space*2, y + space*2, time);		
			}

			task CreateIndvShot(x, y, time) {
				let color;
				if(random == 1){color = DS_BILL_ORANGE;}
				if(random == 2){color = DS_BILL_RED;}
				if(random == 3){color = DS_BILL_YELLOW;}

				let Tcurve = rand(0,0.025);

				let obj1 = CreateShotA1(x,y,0,90,color,20);
				if(random == 1){ // O pattern
					ObjMove_AddPatternA1(obj1,200,NO_CHANGE,angleToPlayer(obj1)+rand(-30,30));
					ObjMove_AddPatternA2(obj1,360-time,0.25,NO_CHANGE,0.025,0.1,2);
				}
				if(random == 2){ // T pattern
					ObjMove_AddPatternA1(obj1,200,NO_CHANGE,Tangles2);
					ObjMove_AddPatternA2(obj1,360-time,1.5,NO_CHANGE,0,Tcurve,1.5);
				}
				if(random == 3){ // A pattern
					ObjMove_AddPatternA1(obj1,200,NO_CHANGE,atan2(lettery-ObjMove_GetY(obj1),letterx-ObjMove_GetX(obj1)));
					ObjMove_AddPatternA2(obj1,360-time,0.5,NO_CHANGE,0.05,0,2.5);
				}
			}
		}
		wait(500);
	}
}

task TEnd {
	while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {yield;}
	TExplosionA(objBossX, objBossY, 10, 0.6);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	Obj_Delete(objBoss);

	wait(30);

	CloseScript(GetOwnScriptID());
}


//O-oooooooooo aaaae-a-a-I-a-u
//Jo-oooooooooooo aae-o-a-a-u-u-a
//E-eee-ee-eee aaaae-a-e-I-e-a
//Jo-ooo-oo-oo-oo eeeeo-a-aaa-aaaa