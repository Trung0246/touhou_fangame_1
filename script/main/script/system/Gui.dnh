//How to include this file: wait until #TouhouDanmakufu[Stage] made, then include this script as #System["script/main/script/system/Gui.dnh"]
#include "script/main/script/lib/Utils.dnh"
#include "script/main/script/lib/SFX.dnh"
#include "script/main/script/lib/Event_Const.dnh"

let dir = "script/main/img/system/";
let guiPath = dir ~ "front00.png";
let digitPath = dir ~ "hud_nums.png";
let lifeBarPath = dir ~ "lifebar.png";
let bossScene = ID_INVALID;

@Initialize {
/*	LoadTexture(guiPath);
	LoadTexture(digitPath);
	LoadTexture(lifeBarPath);*/

	InitFrame();
	InitLine();
	InitHeaders();
	InitDifficulty();
	UpdateHiScore();
	UpdateScore();
	UpdatePlayerLife();
	UpdatePlayerSpell();
	UpdatePlayerRaindrops();
	UpdatePower();
	UpdatePoint(); //Blue drop bonus //144 * 24 for phantasm, ... 304 x 46 for disable
	UpdateGraze();
	UpdateBossLife();
	UpdateBossStep();
	//UpdateBossTimer();
	//UpdateBossXPos();
	UpdateCurrentFpsAndMs();
	UpdateReplayFps();
}

@MainLoop {
	bossScene = GetEnemyBossSceneObjectID();
	yield;
}

@Event {
	alternative (GetEventType())
	case (EV_START_BOSS_STEP) {
		let tempObj = GetEnemyBossObjectID();
		ascent (i in 0..length(tempObj)) {
			UpdateBossXPos(tempObj[i]);
		}
		UpdateBossTimer();
	}
	case (EV_END_BOSS_STEP) {
		
	}
	case(EV_START_BOSS_SPELL) {
		/*let path = dir ~ "Default_System_MagicCircle.txt";
		let id = LoadScript(path);
		StartScript(id);*/
	}
	case(EV_GAIN_SPELL) {
		let score = ObjEnemyBossScene_GetInfo(bossScene, INFO_SPELL_SCORE);
		AddScoreSmooth(score);
		//TGainSpell(score);
	}
	case (EV_PLAYER_SPELL) {
		let tempSpell = GetCommonData("player_spell", 0);
		if (tempSpell > 0) {
			SetCommonData("player_spell", tempSpell - 1);
		}
	}
	case (EV_PLAYER_SHOOTDOWN) {
		let tempLife = GetCommonData("player_life", 0);
		if (tempLife > 0) {
			SetCommonData("player_life", tempLife - 1);
		}
	}
}

task InitFrame {

	let frame = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(frame,"script/main/img/system/frame.png");
	Obj_SetRenderPriority(frame, 0.1);
	ObjRender_SetBlendType(frame, 0);
	//left
	ObjSpriteList2D_SetSourceRect(frame,0,0,32,480); 
	ObjSpriteList2D_SetDestRect(frame,0,0,32,480);
	ObjSpriteList2D_AddVertex(frame);
	//top
	ObjSpriteList2D_SetSourceRect(frame,0,480,384,496);
	ObjSpriteList2D_SetDestRect(frame,32,0,416,16);
	ObjSpriteList2D_AddVertex(frame);
	//bottom
	ObjSpriteList2D_SetSourceRect(frame,0,496,384,512);
	ObjSpriteList2D_SetDestRect(frame,32,464,416,480);
	ObjSpriteList2D_AddVertex(frame);
	//right
	ObjSpriteList2D_SetSourceRect(frame,32,0,256,480);
	ObjSpriteList2D_SetDestRect(frame,416,0,640,480);
	ObjSpriteList2D_AddVertex(frame);
}
task InitLine {
	//7 lines
	let obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(obj, guiPath);
	Obj_SetRenderPriority(obj, 0.1);

	let arrayXY = [
		640 - 212.5, 40 + 18, //Hiscore
		640 - 212.5, 62.5 + 18, //Score, 212.5
		640 - 212.5, 94 + 30, //Life, 211
		640 - 212.5, 130 + 30, //Spell, 212.5 - 10
		640 - 212.5 + 45, 225 - 46 + 19, //Power, 200
		640 - 212.5 + 45, 225 - 21.5 + 17, //Point, 200
		640 - 212.5 + 45, 225 + 18 //Graze, 220
	];
	let arrayTexture = [
		130, 130, 130, 200,
		255, 255, 255, 200,
		234, 145, 227, 200,
		60, 224, 115, 200,
		219, 127, 70, 170,
		22, 181, 255, 170,
		210, 210, 210, 170
	];
	ascent (i in 0..7) {
		let count = i * 2;
		ObjSpriteList2D_SetSourceRect(obj, 928, 992, 1023, 1023); //680 726 749 749
		ObjSpriteList2D_SetDestRect(obj, arrayXY[i * 2], arrayXY[i * 2 + 1], arrayXY[i * 2] + arrayTexture[i * 4 + 3], arrayXY[i * 2 + 1] + 2);
		ObjRender_SetColor(obj, arrayTexture[i * 4], arrayTexture[i * 4 + 1], arrayTexture[i * 4 + 2]);
		ObjRender_SetAlpha(obj, 300);
		ObjSpriteList2D_AddVertex(obj);
	}
}
task InitHeaders{
	let headers = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(headers,"script/main/img/system/hud.png");
	Obj_SetRenderPriority(headers, 0.1);
	//HiScore
	ObjSpriteList2D_SetSourceRect(headers,0,0,96,24);
	ObjSpriteList2D_SetDestRect(headers,417,38,513,60);
	ObjSpriteList2D_AddVertex(headers);

	//Score
	ObjSpriteList2D_SetSourceRect(headers,0,24,96,48);
	ObjSpriteList2D_SetDestRect(headers,417,60,513,84);
	ObjSpriteList2D_AddVertex(headers);

	//Lives
	ObjSpriteList2D_SetSourceRect(headers,0,48,96,72);
	ObjSpriteList2D_SetDestRect(headers,417,93,513,117);
	ObjSpriteList2D_AddVertex(headers);

	//Bombs
	ObjSpriteList2D_SetSourceRect(headers,0,72,96,96);
	ObjSpriteList2D_SetDestRect(headers,417,128,513,152);
	ObjSpriteList2D_AddVertex(headers);

	//Graze
	ObjSpriteList2D_SetSourceRect(headers,96,0,192,24);
	ObjSpriteList2D_SetDestRect(headers,430,223,526,247);
	ObjSpriteList2D_AddVertex(headers);

	//Power
	ObjSpriteList2D_SetSourceRect(headers,96,24,192,48);
	ObjSpriteList2D_SetDestRect(headers,430,179,526,203);
	ObjSpriteList2D_AddVertex(headers);

	//PIV
	ObjSpriteList2D_SetSourceRect(headers,96,48,192,72);
	ObjSpriteList2D_SetDestRect(headers,430,200,526,224);
	ObjSpriteList2D_AddVertex(headers);
}

task InitDifficulty {
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj,dir ~ "diff_ph.png");
	let difficulty = GetAreaCommonData("GameState","Difficulty",1);
	ObjSprite2D_SetSourceRect(obj,0,difficulty*32,128,(difficulty+1)*32);
	ObjSprite2D_SetDestCenter(obj);
	Obj_SetRenderPriority(obj,0.79);
	if(GetAreaCommonData("GameState","Starting",true)){
		ObjRender_SetPosition(obj,192,16,0);
		let color;
		ascent(i in 5..66){
			color = 192+sin(i*18)*64;
			ObjRender_SetColor(obj,color,color,color);
			yield;
		}
		wait(30);
		descent(i in 0..10){
			ObjRender_SetScaleY(obj,i/10);
			yield;
		}
	}
	Obj_SetRenderPriority(obj,0.1);
	ObjRender_SetPosition(obj,528,20,0);
	if(GetAreaCommonData("GameState","Starting",true)){
		ObjRender_SetScaleY(obj,1);
		ascent(i in 0..21){
			ObjRender_SetAlpha(obj,i*26);
			yield;
		}
	}
	SetAreaCommonData("GameState","Starting",false);
	
	
	
}

task UpdateHiScore {
	let obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(obj, digitPath);
	Obj_SetRenderPriority(obj, 0.1);
	ObjRender_SetColor(obj, 180, 180, 180);

	while (true) {
		let number = 9999999999; //Temporary, will try to get high score here
		number = min(number, 9999999999); //2147483647, cap of int, rounded 2000000000

		RenderNumber(obj, 640 - 20, 40 + 2, number, -1, true, false, 0, false);
		yield;
	}
}
task UpdateScore {

	let obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(obj, digitPath);
	Obj_SetRenderPriority(obj, 0.1);

	let scoreLeft = 0;

	while (true) {
		let tempChange = GetCommonData("player_score_change", 0);
		if (tempChange > 0) {
			scoreLeft += tempChange;
			SetCommonData("player_score_change", 0);
		}
		if (scoreLeft > 10) {
			let scoreChange = floor(scoreLeft / GetCommonData("player_score_speed", 1));
			AddScore(scoreChange);
			scoreLeft -= scoreChange; 
		} else if (scoreLeft > 0 && scoreLeft <= 10) {
			AddScore(scoreLeft);
			scoreLeft = 0;
		}

		let maxScore = GetCommonData("player_score_max", 2147483647);
		let number = GetScore();
		if (number > maxScore) {
			AddScore(-(number - maxScore));
			number = GetScore();
		}
		number = min(number, maxScore);

		RenderNumber(obj, 640 - 20, 62 + 2, number, -1, true, false, 0, false);
		yield;
	}
}
task UpdateGraze {

	let obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(obj, digitPath);
	Obj_SetRenderPriority(obj, 0.1);

	while (true) {
		let grazeMax = GetCommonData("player_graze_max", 0);
		let number = GetGraze();
		if (number > grazeMax) {
			AddGraze(-(number - grazeMax));
			number = GetGraze();
		}
		number = min(number, grazeMax);

		RenderNumber(obj, 640 - 20, 225 + 2, number, -1, true, false, 0, false);
		yield;
	}
}
task UpdatePower {
	let obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(obj, digitPath);
	Obj_SetRenderPriority(obj, 0.1);
	ObjRender_SetY(obj, 180);
	ObjRender_SetColor(obj, 219, 127, 70); //221 111 42

	while (true) {
		//The definition of "Black magic fuckery"
		SetPlayerPower(GetCommonData("player_power", 0));
		let number = GetPlayerPower();
		if (number > 4) {
			SetCommonData("player_power", 4);
			SetPlayerPower(GetCommonData("player_power", 0));
			number = GetPlayerPower();
		}
		number = min(number, 4);
		let tempString = rtos("0.00", number);
		let listNum = [ToString(tempString[0]), ".", ToString(tempString[2]), ToString(tempString[3])];
		listNum = listNum ~ ["/", "4", ".", "0", "0"];

		ObjSpriteList2D_ClearVertexCount(obj);
		ascent(i in 0 .. length(listNum)) {
			let num = listNum[i];
			ObjRender_SetX(obj, 640 - 20 - (length(listNum) - 1 - i) * 12);
			if (ToString(num) == ".") {
				ObjSpriteList2D_SetSourceRect(obj, 176, 0, 191, 24);
				ObjSpriteList2D_SetDestRect(obj, 0, 0, 16, 24);
				ObjRender_SetX(obj, ObjRender_GetX(obj) + 1.5);
			} else if (ToString(num) == "/") {
				ObjSpriteList2D_SetSourceRect(obj, 160, 0, 175, 24);
				ObjSpriteList2D_SetDestRect(obj, 0, 0, 16, 24);
			} else {
				ObjSpriteList2D_SetSourceRect(obj, atoi(num) * 16, 0, (atoi(num) + 1) * 16, 24);
				ObjSpriteList2D_SetDestRect(obj, 0, 0, 16, 24);
			}
			ObjSpriteList2D_AddVertex(obj);
		}
		yield;
	}
}
task UpdatePoint {
	let obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(obj, digitPath);
	Obj_SetRenderPriority(obj, 0.1);
	ObjRender_SetColor(obj, 22, 181, 255); //64 92 255

	while (true) {
		let number = 0;
		if (GetCommonData("player_point", 0) > 50000000) {
			SetCommonData("player_point", 50000000); //50000000, because I feel this is balanced
		}
		number = GetCommonData("player_point", 0); 

		RenderNumber(obj, 620, 201, number, -1, true, false, 0, false);
		yield;
	}
}
task UpdatePlayerLife {

	let obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(obj, "script/main/img/system/lifespell2.png");
	Obj_SetRenderPriority(obj, 0.1);
	ObjRender_SetY(obj, 94 + 2);
	ObjRender_SetScaleX(obj, 0.7);
	ObjRender_SetScaleY(obj, 0.7);

	while (true) {
		while (GetCommonData("player_life_piece", 0) >= 1) {
			SetCommonData("player_life_piece", GetCommonData("player_life_piece", 0) - 1);
			if (GetCommonData("player_life", 0) < GetCommonData("player_life_max", 8)) {
				SetCommonData("player_life", GetCommonData("player_life", 0) + 1);
			}
		}
		if (GetCommonData("player_life", 0) >= GetCommonData("player_life_max", 8)) {
			SetCommonData("player_life", GetCommonData("player_life_max", 8));
			SetCommonData("player_life_piece", 0);
		}

		let piece = GetCommonData("player_life_piece", 0);

		let number =  GetCommonData("player_life", 0);
		number = min(number, GetCommonData("player_life_max", 8));
		SetPlayerLife(number);

		let count = 0;

		ObjSpriteList2D_ClearVertexCount(obj);

		//First render current life
		ascent(i in 0 .. number) {
			let num = i;
			ObjRender_SetX(obj, 640 - 152 - (number - count) * -16);
			//ObjSpriteList2D_SetSourceRect(obj, 727 + 1, 1, 750 - 1, 25);
			//ObjSpriteList2D_SetDestRect(obj, 0, 0, 24, 26);
			ObjSpriteList2D_SetSourceRect(obj, 80, 0, 96, 16);
			ObjSpriteList2D_SetDestRect(obj, 0, 0, 24, 24);
			ObjSpriteList2D_AddVertex(obj);
			count ++;
		}
		//Render half life, quarter life, ...
		if (number < GetCommonData("player_life_max", 8)) {
			let pieceCount = GetCommonData("player_life_piece", 0);
			count ++;
			ObjRender_SetX(obj, 640 - 152 + (count) * 16);
			//ObjSpriteList2D_SetSourceRect(obj, 609 + floor(pieceCount * 5) * 24 - pieceCount, 1, 630 + 1 + floor(pieceCount * 5) * 24 - pieceCount, 25);
			//ObjSpriteList2D_SetDestRect(obj, 0, 0, 24 + 1, 26);
			ObjSpriteList2D_SetSourceRect(obj, pieceCount*16, 0, (pieceCount+1)*16, 16);
			ObjSpriteList2D_SetDestRect(obj, 0, 0, 24, 24);
			ObjSpriteList2D_AddVertex(obj);
		}
		//Render empty life
		ascent(i in 0 .. GetCommonData("player_life_max", 0) - 1 - number) {
			let num = i;
			ObjRender_SetX(obj, 640 - 152 - (count + 1) * -16);
			//ObjSpriteList2D_SetSourceRect(obj, 609, 1, 630 + 1, 25);
			//ObjSpriteList2D_SetDestRect(obj, 0, 0, 24 + 1, 26);
			ObjSpriteList2D_SetSourceRect(obj, 0,0,16,16);
			ObjSpriteList2D_SetDestRect(obj, 0, 0, 24, 24);
			ObjSpriteList2D_AddVertex(obj);
			count ++;
		}
		yield;
	}
}

task UpdatePlayerSpell {

	let obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(obj, "script/main/img/system/lifespell2.png");
	Obj_SetRenderPriority(obj, 0.1);
	ObjRender_SetY(obj, 130);
	ObjRender_SetScaleX(obj, 0.7);
	ObjRender_SetScaleY(obj, 0.7);

	while (true) {
		while (GetCommonData("player_spell_piece", 0) >= 1) {
			SetCommonData("player_spell_piece", GetCommonData("player_spell_piece", 0) - 1);
			if (GetCommonData("player_spell", 0) < GetCommonData("player_spell_max", 8)) {
				SetCommonData("player_spell", GetCommonData("player_spell", 0) + 1);
			}
		}
		if (GetCommonData("player_spell", 0) >= GetCommonData("player_spell_max", 8)) {
			SetCommonData("player_spell", GetCommonData("player_spell_max", 8));
			SetCommonData("player_spell_piece", 0);
		}

		let piece = GetCommonData("player_spell_piece", 0);

		let number =  GetCommonData("player_spell", 0);
		number = min(number, GetCommonData("player_spell_max", 8));
		SetPlayerSpell(number);

		let count = 0;

		ObjSpriteList2D_ClearVertexCount(obj);

		//First render current spell
		ascent(i in 0 .. number) {
			let num = i;
			ObjRender_SetX(obj, 640 - 152 - (number - count) * -16);
			//ObjSpriteList2D_SetSourceRect(obj, 727, 0 + 27, 750 - 1, 25 + 27);
			//ObjSpriteList2D_SetDestRect(obj, 0, 0, 24, 26);
			ObjSpriteList2D_SetSourceRect(obj, 80,16,96,32);
			ObjSpriteList2D_SetDestRect(obj, 0, 0, 24, 24);
			ObjSpriteList2D_AddVertex(obj);
			count ++;
		}
		//Render half spell, quarter spell, ...
		if (number < GetCommonData("player_spell_max", 8)) {
			let pieceCount = GetCommonData("player_spell_piece", 0);
			count ++;
			ObjRender_SetX(obj, 640 - 152 + (count) * 16);
			//ObjSpriteList2D_SetSourceRect(obj, 608 + floor(pieceCount * 5) * 24 - pieceCount, 0 + 27, 630 + 2 + floor(pieceCount * 5) * 24 - pieceCount, 25 + 27);
			//ObjSpriteList2D_SetDestRect(obj, 0, 0, 24 + 2, 26);
			ObjSpriteList2D_SetSourceRect(obj, pieceCount*16,16,(pieceCount+1)*16,32);
			ObjSpriteList2D_SetDestRect(obj, 0, 0, 24, 24);
			ObjSpriteList2D_AddVertex(obj);
		}
		//Render empty spell
		ascent(i in 0 .. GetCommonData("player_spell_max", 0) - 1 - number) {
			let num = i;
			ObjRender_SetX(obj, 640 - 152 - (count + 1) * -16);
			//ObjSpriteList2D_SetSourceRect(obj, 608, 0 + 27, 630 + 1, 25 + 27);
			//ObjSpriteList2D_SetDestRect(obj, 0, 0, 24 + 1, 26);
			ObjSpriteList2D_SetSourceRect(obj, 0,16,16,32);
			ObjSpriteList2D_SetDestRect(obj, 0, 0, 24, 24);
			ObjSpriteList2D_AddVertex(obj);
			count ++;
		}

		yield;
	}
}

task UpdatePlayerRaindrops {
	let max = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(max, digitPath);
	Obj_SetRenderPriority(max, 0.1);
	ObjRender_SetColor(max, 192,192,255);

	ObjRender_SetPosition(max,592,150,0);
	ObjSpriteList2D_SetSourceRect(max,160,0,176,24);
	ObjSpriteList2D_SetDestRect(max,0,0,10,16);
	ObjSpriteList2D_AddVertex(max);
	ObjSpriteList2D_SetSourceRect(max,32,0,48,24);
	ObjSpriteList2D_SetDestRect(max,10,0,20,16);
	ObjSpriteList2D_AddVertex(max);
	ObjSpriteList2D_SetSourceRect(max,0,0,16,24);
	ObjSpriteList2D_SetDestRect(max,20,0,30,16);
	ObjSpriteList2D_AddVertex(max);

	ObjRender_SetY(max,116);
	ObjSpriteList2D_SetSourceRect(max,160,0,176,24);
	ObjSpriteList2D_SetDestRect(max,0,0,10,16);
	ObjSpriteList2D_AddVertex(max);
	ObjSpriteList2D_SetSourceRect(max,32,0,48,24);
	ObjSpriteList2D_SetDestRect(max,10,0,20,16);
	ObjSpriteList2D_AddVertex(max);
	ObjSpriteList2D_SetSourceRect(max,0,0,16,24);
	ObjSpriteList2D_SetDestRect(max,20,0,30,16);
	ObjSpriteList2D_AddVertex(max);
	
//function RenderNumber(obj, x, y, number, digit, haveComma, havePeriod, floatDigit, isSmallFloat) {
	let life = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(life, digitPath);
	Obj_SetRenderPriority(life, 0.1);
	ObjRender_SetColor(life, 192,192,255);
	ObjRender_SetPosition(life,582,116,0);

	let bomb = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(bomb, digitPath);
	Obj_SetRenderPriority(bomb, 0.1);
	ObjRender_SetColor(bomb, 192,192,255);
	ObjRender_SetPosition(bomb,582,150,0);

	let count = [];
	let number;
	let objs = [life,bomb];
	while (true) {
		count = [GetCommonData("item_raindrop_red", 0),GetCommonData("item_raindrop_green", 0)];
		
		ascent(j in 0..2){
			ObjSpriteList2D_ClearVertexCount(objs[j]);
			ascent(i in 0..2){
				number = floor(count[j]%10);
				ObjSpriteList2D_SetSourceRect(objs[j],number*16,0,(number+1)*16,24);
				ObjSpriteList2D_SetDestRect(objs[j],i*-10,0,(i-1)*-10,16);
				ObjSpriteList2D_AddVertex(objs[j]);
				count[j] = count[j] / 10;
			}
		}
		yield;
	}

}

task UpdateBossLife {
	let active = false;

	let path = GetCurrentScriptDirectory() ~ "img/Default_System.png";

	let lastRemStep = -1;
	let lifeRateRender = 0;

	while (true) {
		//bossScene = GetEnemyBossSceneObjectID();
		if (bossScene != ID_INVALID) {
			if (!active) {
				active = true;
				RenderCircle();
			}
		}

		yield;
	}


	task RenderCircle {
		lifeRateRender = 0;

		//Sprite list for those little divider things
		let divisions = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
		Obj_SetRenderPriority(divisions, 0.76);
		ObjPrim_SetTexture(divisions, lifeBarPath);
		ObjSpriteList2D_SetSourceRect(divisions, 16, 0, 32, 16);
		redrawDivisions();

		//Will be called again to update them when the lifebar is emptied
		task redrawDivisions {
			let listLifeDiv = [] ~ ObjEnemyBossScene_GetInfo(bossScene, INFO_ACTIVE_STEP_LIFE_RATE_LIST);
			ObjSpriteList2D_ClearVertexCount(divisions);
			ascent(i in 0..length(listLifeDiv) - 1) {
				let angle = listLifeDiv[i] * 360 - 90;
				ObjSpriteList2D_SetDestRect(divisions, -4, -8, 4, 8);
				ObjRender_SetPosition(divisions, cos(angle) * 60, sin(angle) * 60, 0);
				ObjRender_SetAngleZ(divisions, angle + 90);
				ObjSpriteList2D_AddVertex(divisions);
			}
			ObjSpriteList2D_CloseVertex(divisions);
		}

		//This is the actual lifebar
		let lifebar = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		Obj_SetRenderPriority(lifebar, 0.75);
		ObjPrim_SetTexture(lifebar, lifeBarPath);
		ObjPrim_SetPrimitiveType(lifebar, PRIMITIVE_TRIANGLESTRIP);
		ObjPrim_SetVertexCount(lifebar, 62);

		let circle = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetTexture(circle, lifeBarPath);
		ObjPrim_SetPrimitiveType(circle, PRIMITIVE_TRIANGLESTRIP);
		ObjPrim_SetVertexCount(circle, 62);
		Obj_SetRenderPriority(circle, 0.74);

		//Set up textures for all the circular parts
		ascent(iVert in 0..32) {
			let indexVert = iVert * 2;

			ObjPrim_SetVertexUVT(circle, indexVert + 0, 8, 0);
			ObjPrim_SetVertexUVT(circle, indexVert + 1, 16, 31);

			ObjPrim_SetVertexUVT(lifebar, indexVert + 0, 0, 0);
			ObjPrim_SetVertexUVT(lifebar, indexVert + 1, 8, 31); //4, 16
		}

		//Finalize the empty circle
		ascent(i in 0..31) {
			ascent(j in 0..2) {
				ObjPrim_SetVertexPosition(circle, i * 2 + j, cos(i * 12) * (64 - j * 5), sin(i * 12) * (64 - j * 5), 0);
			}
		}

		//Keep updating things until the boss scene no longer exists
		while (bossScene != ID_INVALID) {
			let lifeTotalMax = ObjEnemyBossScene_GetInfo(bossScene, INFO_ACTIVE_STEP_TOTAL_MAX_LIFE);
			let lifeTotal = ObjEnemyBossScene_GetInfo(bossScene, INFO_ACTIVE_STEP_TOTAL_LIFE);
			let lifeRate = min(lifeTotal / lifeTotalMax, lifeRateRender);

			let countRemStep = ObjEnemyBossScene_GetInfo(bossScene, INFO_REMAIN_STEP_COUNT);
			if (lastRemStep != countRemStep) {
				lifeRateRender = 0;
				redrawDivisions();
			}

			//Move all to boss' position
			let boss = GetEnemyBossObjectID();
			if (length(boss) > 0) {
				ObjRender_SetPosition(circle, ObjMove_GetX(boss[0]), ObjMove_GetY(boss[0]), 0);

				ObjRender_SetPosition(lifebar, ObjMove_GetX(boss[0]), ObjMove_GetY(boss[0]), 0);
				ObjRender_SetPosition(divisions, ObjMove_GetX(boss[0]), ObjMove_GetY(boss[0]), 0);
			}

			//Redraw health bar
			let angle = 12 * lifeRate;
			ascent(i in 0..31) {
				let xpos = cos(-i * angle - 90);
				let ypos = sin(-i * angle - 90);
				ascent(j in 0..2) {
					ObjPrim_SetVertexPosition(lifebar, i * 2 + j, xpos * (64 - j * 5), ypos * (64 - j * 5), 0);
				}
			}

			lifeRateRender = min(lifeRateRender + 0.01, 1);
			lastRemStep = countRemStep;

			yield;
		}

		//Throw all the things away
		Obj_Delete(lifebar);
		Obj_Delete(divisions);
		Obj_Delete(circle);

		//And make sure the lifebar can actually appear again!!
		active = false;
	}
}
task UpdateBossTimer {
	yield;

	let active = true;
	let obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(obj, digitPath);
	Obj_SetRenderPriority(obj, 0.75);
	ObjRender_SetY(obj, 0);
	let count = 4;

	let time;
	let sec = 0;

	//CheckSpell;
	CheckRemainingTime();
	CheckTimerFade();
	while (bossScene != ID_INVALID) {
		time = ObjEnemyBossScene_GetInfo(bossScene, INFO_TIMERF);
		sec = min(99.99, time / 60);
		RenderNumber(obj, 192 + 12, 0, sec, 2, false, true, 2, true);
		yield;

	}
	active = false;
	//This is the part where the timer goes away and everything is trashed
	Obj_Delete(obj);
	//Obj_Delete(timeout1);
	//Obj_Delete(timeout2);


	task CheckTimerFade {
		let objPlayer = GetPlayerObjectID();
		while (active) {
			if (ObjMove_GetX(objPlayer) > 162 && ObjMove_GetX(objPlayer) < 222 && ObjMove_GetY(objPlayer) < 96) {
				ObjRender_SetAlpha(obj, 128);
				while (ObjMove_GetX(objPlayer) > 162 && ObjMove_GetX(objPlayer) < 222 && ObjMove_GetY(objPlayer) < 96 && active) {
					yield;
				}
				ObjRender_SetAlpha(obj, 256);
			}
			yield;
		}
	}
	//TODO: update this once we decide how to check if a spell is active
	/*task CheckSpell {
		while(active){
			while(!GetCommonData("SpellActive",false) && active){
				yield;
			}
			ascent(i in 0..35){
				ObjRender_SetY(obj,i);
				yield;
			}
			while(GetCommonData("SpellActive",false) && active){
				ObjRender_SetY(obj,35);
				yield;
			}
			descent(i in 0..35){
				ObjRender_SetY(obj,i);
				yield;
			}
		}
	}*/

	task CheckRemainingTime {
		while (active) {
			yield;
			while (sec > 10 && active) {
				yield;
			}
			ObjRender_SetColor(obj, 256, 128, 128);
			while (sec <= 10 && sec >= 5 && active) {
				if (sec % 1 == 0) {
					Beep;
				}
				yield;
			}
			ObjRender_SetColor(obj, 256, 64, 64);
			while (sec <= 5 && sec > 0 && active) {
				if (sec % 1 == 0) {
					Beep;
				}
				yield;
			}
			ObjRender_SetColor(obj, 256, 256, 256);
		}

		task Beep {
			if (sec > 5) {
				PlaySFX(SFX_TIMEOUT1);
				descent(i in 0..5) {
					ObjRender_SetScaleXYZ(obj, 1 + i / 20, 1 + i / 20, 0);
					yield;
				}
			} else {
				PlaySFX(SFX_TIMEOUT2);
				descent(i in 0..5) {
					ObjRender_SetScaleXYZ(obj, 1 + i / 10, 1 + i / 10, 0);
					yield;
				}
			}
		}
	}
}

task UpdateBossStep {
	let active = false;
	while (true) {
		if (bossScene != ID_INVALID) {
			if (!active) {
				active = true;
				RenderStep();
				RenderName;
			}
		}
		yield;
	}

	task RenderStep {
		let stars = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
		Obj_SetRenderPriority(stars, 0.75);
		ObjPrim_SetTexture(stars, lifeBarPath);
		ObjSpriteList2D_SetSourceRect(stars, 16, 16, 32, 32);
		
		task updateStars(count) {
			ObjSpriteList2D_ClearVertexCount(stars);
			ascent(i in 0..count) {
				ObjSpriteList2D_SetDestRect(stars,0, 0, 12, 12);
				ObjRender_SetPosition(stars, 3 + (i % 6) * 14, 16 + floor(i / 6) * 14, 0);
				ObjSpriteList2D_AddVertex(stars);
			}
			ObjSpriteList2D_CloseVertex(stars);
		}
		CheckStarFade();

		let lastRemStep = -1;
		let countRemStep = ObjEnemyBossScene_GetInfo(bossScene, INFO_REMAIN_STEP_COUNT);
		updateStars(countRemStep);
		yield;
		while (bossScene != ID_INVALID) {
			countRemStep = ObjEnemyBossScene_GetInfo(bossScene, INFO_REMAIN_STEP_COUNT);
			if (lastRemStep != countRemStep) {
				updateStars(countRemStep);
				lastRemStep = countRemStep;
			}
			yield;
		}
		Obj_Delete(stars);
		active = false;

		task CheckStarFade {
			yield;
			let objPlayer = GetPlayerObjectID();
			while (!Obj_IsDeleted(stars)) {
				if (ObjMove_GetX(objPlayer) < 100 && ObjMove_GetY(objPlayer) < 64) {
					ObjRender_SetAlpha(stars, 128);
					updateStars(ObjEnemyBossScene_GetInfo(bossScene, INFO_REMAIN_STEP_COUNT));
					while (ObjMove_GetX(objPlayer) < 100 && ObjMove_GetY(objPlayer) < 64 && !Obj_IsDeleted(stars)) {
						yield;
					}
					ObjRender_SetAlpha(stars, 256);
					updateStars(ObjEnemyBossScene_GetInfo(bossScene, INFO_REMAIN_STEP_COUNT));
				}
				yield;
			}
		}

	}

	task RenderName {
		wait(5);
		let name = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(name,"script/main/img/enemy/ename.png");
		let which = GetAreaCommonData("GameState","CurrentBoss",0);
		ObjSprite2D_SetSourceRect(name,0,which*16,256,(which+1)*16);
		ObjSprite2D_SetDestRect(name,0,0,256,16);
		ObjRender_SetPosition(name,0,0,256);
		while(active){yield;}
		Obj_Delete(name);

	}

}
task UpdateBossXPos (obj) {
	let objBossMark = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objBossMark, guiPath);
	Obj_SetRenderPriority(objBossMark, 0.1);
	ObjSprite2D_SetSourceRect(objBossMark, 928, 992, 1023, 1023); //The right one 683 726 746 749
	ObjSprite2D_SetDestRect(objBossMark, 0, 0, 64, 16);
	ObjRender_SetColor(objBossMark, 255, 0, 0);
	ObjRender_SetY(objBossMark, 480 - 16);
	ObjRender_SetAlpha(objBossMark, 170);
	while (GetEventType() != EV_END_BOSS_STEP) {
		if (Obj_IsDeleted(obj)) {
			Obj_Delete(objBossMark);
			return;
		}
		ObjRender_SetX(objBossMark, ObjMove_GetX(obj));
		yield;
	}
}
task UpdateCurrentFpsAndMs {
	let objFps = ObjText_Create();
	ObjText_SetFontType(objFps, "Russell Square Std");//GetCurrentScriptDirectory() ~ "system/russell-square.ttf");
	ObjText_SetFontSize(objFps, 15);
	ObjText_SetFontBold(objFps, true);
	ObjText_SetFontColorTop(objFps, 205, 205, 205);
	ObjText_SetFontColorBottom(objFps, 100, 100, 100);
	ObjText_SetFontBorderType(objFps, BORDER_FULL);
	ObjText_SetFontBorderColor(objFps, 0, 0, 0);
	ObjText_SetFontBorderWidth(objFps, 1);
	ObjText_SetHorizontalAlignment(objFps, ALIGNMENT_RIGHT);
	ObjText_SetMaxWidth(objFps, GetScreenWidth() - 8);
	Obj_SetRenderPriority(objFps, 1);
	ObjRender_SetX(objFps, 5);
	ObjRender_SetY(objFps, GetScreenHeight() - 16);

	let objMs = ObjText_Create();
	ObjText_SetFontType(objMs, "Russell Square Std");
	ObjText_SetFontSize(objMs, 15);
	ObjText_SetFontBold(objMs, true);
	ObjText_SetFontColorTop(objMs, 205, 205, 205);
	ObjText_SetFontColorBottom(objMs, 100, 100, 100);
	ObjText_SetFontBorderType(objMs, BORDER_FULL);
	ObjText_SetFontBorderColor(objMs, 0, 0, 0);
	ObjText_SetFontBorderWidth(objMs, 1);
	ObjText_SetHorizontalAlignment(objMs, ALIGNMENT_RIGHT);
	ObjText_SetMaxWidth(objMs, GetScreenWidth() - 8);
	Obj_SetRenderPriority(objMs, 1);
	ObjRender_SetX(objMs, 5);
	ObjRender_SetY(objMs, GetScreenHeight() - 30);

	//Option
	let smoothing = 1; //Can change this value, should be in option menu tho, minumum 1
	let fpsRate = 5; //For Fps only, can change in option menu too, in frame
	let maxMs = 0; //Do not change this value, seriously, because I don't know what this one do ...

	//Value that can't change
	let time = 0;
	let thisFrameTime = 0;
	let lastLoop = GetStageTime() - maxMs;
	let frameTime = maxMs; //Do not touch this
	let frameStart = GetStageTime(); //smooth value
	let tempFpsRate = 0;
	let listNum;

	let ms = 0;
	let fps = 0;

	while (true) {
		//Calculate fps and ms
		time = GetStageTime();
		thisFrameTime = time - lastLoop;
		frameTime += (thisFrameTime - frameTime) / smoothing;
		if (frameStart < lastLoop) {
			ms = frameTime;
		} else {
			ms = time - frameStart;
		}
		lastLoop = time;

		/*let time = GetStageTime();
		let ms = time - preTime;
		preTime = time;*/

		//Render fps and ms
		if (GetCurrentFps() <= fpsRate) {
			 tempFpsRate = 0;
		}
		if (tempFpsRate <= 0) {
			fps = min(1000 / frameTime, GetCurrentFps());
			tempFpsRate += fpsRate;
			ObjText_SetText(objFps, rtos("0.000", fps) ~ " fps");
		} else {
			tempFpsRate --;
		}
		ObjText_SetText(objMs, IntToString(ms) ~ " ms");
		yield;
	}
}
task UpdateReplayFps {
	//Too lazy to change comma here... As it not important...
	if (!IsReplay()) {
		return;
	}
	let objFps = ObjText_Create();
	ObjText_SetFontType(objFps, "Russell Square Std");//GetCurrentScriptDirectory() ~ "system/russell-square.ttf");
	ObjText_SetFontSize(objFps, 15);
	ObjText_SetFontBold(objFps, true);
	ObjText_SetFontColorTop(objFps, 205, 205, 205);
	ObjText_SetFontColorBottom(objFps, 100, 100, 100);
	ObjText_SetFontBorderType(objFps, BORDER_FULL);
	ObjText_SetFontBorderColor(objFps, 0, 0, 0);
	ObjText_SetFontBorderWidth(objFps, 1);
	ObjText_SetHorizontalAlignment(objFps, ALIGNMENT_LEFT);
	ObjText_SetMaxWidth(objFps, GetScreenWidth() - 8);
	Obj_SetRenderPriority(objFps, 1);
	ObjRender_SetX(objFps, 640 - 222.5);
	ObjRender_SetY(objFps, GetScreenHeight() - 16);

	while (true) {
		ObjText_SetText(objFps, IntToString(GetReplayFps()) ~ " fps");
		yield;
	}
}

function RenderNumber(obj, x, y, number, digit, haveComma, havePeriod, floatDigit, isSmallFloat) {
	if (floatDigit < 0) {
		floatDigit = 0;
	}

	ObjSpriteList2D_ClearVertexCount(obj);
	ObjRender_SetY(obj, y);

	number = roundNumber(number, floatDigit);

	let floatNum = ator(number - floor(number)); //add ator() because 16.1 - 16 != 0.1 (try it)
	let listNum = DigitToArray(floatNum * 1000000, -1);
	let zeroCount = 0;
	let digits = NumberLength(floatNum * 1000000) + 1;
	let xCount = 0;

	let size = 12;
	let size2 = 0;
	let size3 = 0;
	let switch = false;

	if (isSmallFloat) {
		size = 9;
		size2 = 6;
		size3 = 3;
	}

	if (havePeriod && floatDigit > 0) {
		xCount += 12;
		while (length(listNum) < 6) {
			listNum = [0] ~ listNum;
			zeroCount --;
		}
		descent (i in 0..6) {
			let num = listNum[i];
			if (i == 5 && floatDigit == 6) {
				switch = true;
			}
			if (num != 0 || switch == true) {
				switch = true;
				ObjSpriteList2D_SetSourceRect(obj, num * 16, 0, (num + 1) * 16, 24);
				ObjRender_SetX(obj, x - (digits - 1 - i) * size);
				ObjSpriteList2D_SetDestRect(obj, (0 + zeroCount * size), size3, (16 + zeroCount * size) - size2, 24-size3);
				ObjSpriteList2D_AddVertex(obj);
				xCount += size;
			} else {
				if (i == floatDigit && floatDigit < 6) {
					switch = true;
				}
				zeroCount ++;
			}
		}
		ObjSpriteList2D_SetSourceRect(obj, 176, 0, 192, 24);
		ObjSpriteList2D_SetDestRect(obj, 0, 0, 16, 24);
		if (isSmallFloat) {
			ObjRender_SetX(obj, ObjRender_GetX(obj) - 2 + (zeroCount - 1) * 9);
			xCount += 1;
		} else {
			ObjRender_SetX(obj, ObjRender_GetX(obj) + 3 + (zeroCount - 1) * 12);
			xCount -= 4;
		}
		ObjSpriteList2D_AddVertex(obj);
	}

	if (digit > -1) {
		listNum = DigitToArray(number, digit);
		digits = digit;
	} else {
		listNum = DigitToArray(number, -1);
		digits = NumberLength(number) + 1;
	}
	let commaCount = 0;

	descent (i in 0 .. digits) {
		let num = listNum[i];
		ObjRender_SetX(obj, x - (digits - 1 - i) * 12 - xCount);
		ObjSpriteList2D_SetSourceRect(obj, num * 16, 0, (num + 1) * 16, 24);
		ObjSpriteList2D_SetDestRect(obj, 0 - commaCount * 6, 0, 16 - commaCount * 6, 24);	
		ObjSpriteList2D_AddVertex(obj);
		if ((digits - i) % 3 == 0 && i != digits && i != 0 && haveComma) {
			ObjSpriteList2D_SetSourceRect(obj, 192, 0, 208, 24);
			ObjSpriteList2D_SetDestRect(obj, -4 - commaCount * 6, 0 + 4, 12 - commaCount * 6, 16 + 4);
			ObjRender_SetX(obj, ObjRender_GetX(obj) - 5);
			commaCount ++;
			ObjSpriteList2D_AddVertex(obj);
		}
	}

	ObjSpriteList2D_CloseVertex(obj);
}
