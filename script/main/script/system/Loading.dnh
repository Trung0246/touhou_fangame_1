#include "script/main/script/lib/Mask.dnh"

//Loading functions to be included in the package
function LoadMainMenu {
	let paths = GetFilePathList("script/main/img/system/menu/");
	ascent(i in 0..length(paths)) {
		LoadTexture(paths[i]);
		yield;
	}
}

function LoadGlobal {
	let paths = GetFilePathList("script/main/img/system/");
	ascent(i in 0..length(paths)) {
		LoadTexture(paths[i]);
		yield;
	}
	paths = GetFilePathList("script/main/img/enemy/stage/");
	ascent(i in 0..length(paths)) {
		LoadTexture(paths[i]);
		yield;
	}
}

function LoadSounds{
	let sfxlist = ["menusel.wav","menuok.wav","menuinvalid.wav",
			"timeout1.wav","timeout2.wav","Item.wav",
			"enemydown.wav","nodamage.wav","missil.wav",
			"pldead.wav","PAUSE.wav","UNPAUSE.wav","shot1.wav",
			"shot2.wav","laser.wav"];
	let sounds = [];
	ascent(i in 0..length(sfxlist)){
		let snd = ObjSound_Create;
		ObjSound_Load(snd,"script/main/sound/sfx/" ~ sfxlist[i]);
	//	ObjSound_SetSoundDivision(snd,SOUND_SFX);
		ObjSound_SetVolumeRate(snd,GetAreaCommonData("Settings","sound_fx_volume",100));
		sounds = sounds ~ [snd];
	}
	SetCommonData("SoundList",sounds);
}

function LoadStage(id) {
	let paths = GetFilePathList("script/main/img/face/" ~ itoa(id) ~ "/");
	paths = paths ~ GetFilePathList("script/main/img/enemy/boss/" ~ itoa(id) ~ "/");
	paths = paths ~ GetFilePathList("script/main/img/stage/" ~ itoa(id) ~ "/");
	ascent(i in 0..length(paths)) {
		LoadTexture(paths[i]);
		yield;
	}
}

function UnloadStage(id) {
	let paths = GetFilePathList("script/main/img/face/" ~ itoa(id) ~ "/");
	paths = paths ~ GetFilePathList("script/main/img/enemy/boss/" ~ itoa(id) ~ "/");
	paths = paths ~ GetFilePathList("script/main/img/stage/" ~ itoa(id) ~ "/");
	ascent(i in 0..length(paths)) {
		RemoveTexture(paths[i]);
		yield;
	}
}

//Loading transitions and effects
task LoadAndThenStartTheGame {
	let bg = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(bg, 30);
	ObjPrim_SetTexture(bg, "script/main/img/system/menu/SplashTemp.png");
	ObjSprite2D_SetSourceRect(bg, 0, 0, 1280, 960);
	ObjSprite2D_SetDestRect(bg, 0, 0, 640, 480);
	LoadingIndicator();
	wait(90);
	LoadGlobal();
	LoadMainMenu();
	SetAreaCommonData("GameState", "loading", false);
	descent(i in 0..65) {
		ObjRender_SetColor(bg, i * 4, i * 4, i * 4);
		yield;
	}
	DisplayTitle();
	descent(i in 0..17) {
		ObjRender_SetAlpha(bg, i * 16);
		yield;
	}
	Obj_Delete(bg);
}

task LoadingStageTransition(checkQuit) {
	BGM_Stop();
	SetAreaCommonData("GameState", "NoBGM", true);
	LoadingIndicator();
	
	let objBackground = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objBackground, "script/main/img/system/menu/transitionBG.jpg");
	ObjSprite2D_SetSourceRect(objBackground, 0, 0, 1023, 1023);
	ObjSprite2D_SetDestRect(objBackground, 0, 0, 640, 640);
	Obj_SetRenderPriorityI(objBackground, 92);

	let objSwitch = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objSwitch, "script/main/img/system/menu/transition.png");
	ObjSprite2D_SetSourceRect(objSwitch, 0, 0, 64, 64);
	ObjSprite2D_SetDestRect(objSwitch, 0, 0, 640, 480);
	Obj_SetRenderPriorityI(objSwitch, 91);
	ObjRender_SetAlpha(objSwitch, 255);

	let objSwitch2 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objSwitch2, "script/main/img/system/menu/transition.png");
	ObjSprite2D_SetSourceRect(objSwitch2, 0, 0, 64, 64);
	ObjSprite2D_SetDestRect(objSwitch2, 0, 0, 640, 480);
	Obj_SetRenderPriorityI(objSwitch2, 91);
	ObjRender_SetAlpha(objSwitch2, 255 * (1 / 3));

	ObjRender_CreateMask(objBackground);
	ObjRender_InitMask(objBackground, 1, [1, 1]);
	ObjRender_AddMask(objBackground, objSwitch);
	ObjRender_AddMask(objBackground, objSwitch2);

	let scrollCount = 0;
	let yCount = 0;
	let scaleCount = 0;

	let isScroll = true;

	task ScrollBackground() {
		while (isScroll) {
			ObjSprite2D_SetSourceRect(objBackground, 0 + scrollCount, 0 + scrollCount, 511 * 4 + scrollCount, 511 * 4 + scrollCount);
			ObjSprite2D_SetSourceRect(objSwitch, 0 + scrollCount * 0.7, 0 + 1, 64 + scrollCount * 0.7, 64 + 0);
			ObjSprite2D_SetSourceRect(objSwitch2, 0 + scrollCount * 0.35, 0 + 1, 64 + scrollCount * 0.35, 64 + 0);
			scrollCount += 3;
			ObjRender_UpdateMask(objBackground);
			yield;
		}
	}
	ScrollBackground();

	if (checkQuit) {
		yCount = -18.365 * 80;
		scaleCount = 18.375 / 480 * 80;

		ObjRender_SetY(objSwitch, 480 + yCount);
		ObjRender_SetY(objSwitch2, 480 + yCount);
		ObjRender_SetScaleY(objSwitch, scaleCount);
		ObjRender_SetScaleY(objSwitch2, scaleCount);
	} else {
		loop (80) {
			ObjRender_SetY(objSwitch, 480 + yCount);
			ObjRender_SetY(objSwitch2, 480 + yCount);
			ObjRender_SetScaleY(objSwitch, scaleCount);
			ObjRender_SetScaleY(objSwitch2, scaleCount);

			yCount -= 18.365;
			scaleCount += 18.375 / 480;
			yield;
		}
	}
	//Waiting for shit to load here ...
	while (GetAreaCommonData("GameState","loading",false)) {
		yield;
	}
	loop (81) {
		ObjRender_SetY(objSwitch, 480 + yCount);
		ObjRender_SetY(objSwitch2, 480 + yCount);
		ObjRender_SetScaleY(objSwitch, scaleCount);
		ObjRender_SetScaleY(objSwitch2, scaleCount);

		yCount += 18.365;
		scaleCount -= 18.375 / 480;
		yield;
	}
	
	isScroll = false;

	Obj_Delete(objBackground);
	Obj_Delete(objSwitch);
	Obj_Delete(objSwitch2);
	
	/*let obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(obj, "script/main/img/system/menu/black.png");
	ObjSpriteList2D_SetSourceRect(obj, 0, 0, 32, 32);
	Obj_SetRenderPriorityI(obj, 91);
	ascent(i in 0..16) {
		ObjSpriteList2D_SetDestRect(obj, 0, i * 16, 640, (i + 1) * 16);
		ObjRender_SetAlpha(obj, i * 16);
		ObjSpriteList2D_AddVertex(obj);
	}
	ObjSpriteList2D_SetDestRect(obj, 0, 256, 640, 768);
	ObjRender_SetAlpha(obj, 256);
	ObjSpriteList2D_AddVertex(obj);
	ObjSpriteList2D_CloseVertex(obj);

	descent(i in 0..60) {
		ObjRender_SetPosition(obj, 0, sin(i * 1.5) * 736 - 256, 0);
		yield;
	}
	while (GetAreaCommonData("GameState", "loading", false)) {
		yield;
	}
	ascent(i in 0..60) {
		ObjRender_SetPosition(obj, 0, sin(i * 1.5) * 736 - 256, 0);
		yield;
	}
	Obj_Delete(obj);*/
}

task LoadingIndicator {
	SetAreaCommonData("GameState", "loading", true);
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, 95);
	ObjPrim_SetTexture(obj, "script/main/img/system/loading.png");
	ObjSprite2D_SetSourceRect(obj, 0, 0, 256, 128);
	ObjSprite2D_SetDestRect(obj, 0, 0, 128, 64);
	ObjRender_SetPosition(obj, 448, 384, 0);
	JustAddWater();
	while (GetAreaCommonData("GameState", "loading", false)) {
		ascent(i in 0..120) {
			if (!GetAreaCommonData("GameState", "loading", false)) {
				break;
			}
			let color = 192 + sin(i * 3) * 64;
			ObjRender_SetColor(obj, color, color, color);
			yield;
		}
	}
	descent(i in 0..17) {
		ObjRender_SetAlpha(obj, i * 16);
		yield;
	}
	Obj_Delete(obj);

	task JustAddWater {
		let n;
		while (GetAreaCommonData("GameState", "loading", false)) {
			let raindrop = ObjPrim_Create(OBJ_SPRITE_2D);
			Obj_SetRenderPriorityI(raindrop, 93);
			ObjPrim_SetTexture(raindrop, "script/main/img/system/loading.png");
			n = floor(rand(0, 2));
			ObjSprite2D_SetSourceRect(raindrop, n * 64, 128, (n + 1) * 64, 192);
			ObjSprite2D_SetDestCenter(raindrop);
			ObjRender_SetScaleXYZ(raindrop, 0.5, 0.5, 1);
			ObjRender_SetPosition(raindrop, 448 + rand(0, 128), 384, 0);
			DropRainDrop(raindrop);
			wait(2);
		}

		task DropRainDrop(rain) {
			ascent(i in 0..8) {
				ObjRender_SetY(rain, 384 + i * 2);
				ObjRender_SetAlpha(rain, i * 32);
				yield;
			}
			ascent(i in 0..16) {
				ObjRender_SetY(rain, 400 + i * 2);
				ObjRender_SetAlpha(rain, 256 - i * 16);
				yield;
			}
			Obj_Delete(rain);
		}
	}
}
