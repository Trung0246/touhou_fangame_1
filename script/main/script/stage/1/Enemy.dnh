let FAIRY_STREAM = 1;
let FAIRY_RAINCIRCLE = 2;
let INVISIBLE_RAIN = 3;
let FAIRY_PLAIN = 4; //I have no idea what to call it :S
let FAIRY_SUPERRAIN = 5;
function StageEnemy(x,y,type,shotHitbox,playerHitbox,health,extra){
	if(bossActive){return;}
	let enemy = ObjEnemy_Create(OBJ_ENEMY);
	ObjEnemy_Regist(enemy);
	ObjMove_SetPosition(enemy,x,y);
	StageEnemyHitbox(enemy,shotHitbox,playerHitbox,health,type);
	alternative(type)
		case(FAIRY_STREAM){StreamFairyBehavior(enemy,extra);} //[xdest,ydest,color]
		case(FAIRY_RAINCIRCLE){RainFairyBehavior(enemy,extra);} //[xdest,ydest]
		case(INVISIBLE_RAIN){RainThingyBehavior(enemy,extra);} //No arguments
		case(FAIRY_PLAIN){PlainFairyBehavior(enemy,extra);} //[angle]
		case(FAIRY_SUPERRAIN){SuperRainFairyBehavior(enemy,extra);} //[ydest]
	return enemy;

}

task StreamFairyBehavior(enemy,extra){
	AnimateSmallFairy(enemy,extra[2]);
	ObjMove_SetDestAtWeight(enemy,extra[0],extra[1],10,4);
	if(extra[0] > ObjMove_GetX(enemy)){Obj_SetValue(enemy,"Anim",4);}
	else{Obj_SetValue(enemy,"Anim",3);}
	wait(60);
	Obj_SetValue(enemy,"Anim",0);
	wait(40);
	let diff = GetAreaCommonData("GameState","Difficulty",1);
	let diff_count = [2,3,4,5][diff];
	let diff_angle = [16,12,10,8][diff];
	let diff_speed = [2,2.5,2.5,3][diff];
	loop(5){
		if(Obj_IsDeleted(enemy)){break;}
		PlaySFX(SFX_SHOT1);
		ascent(i in -diff_count..diff_count+1){
			let shot = SPShotA1(ObjMove_GetX(enemy),ObjMove_GetY(enemy),diff_speed-absolute(i)/2,GetAngleToPlayer(enemy)+i*absolute(i*diff_angle),SCALE_BLUE+absolute(i)%2,10);
			ObjMove_AddPatternB2(shot,180,NO_CHANGE,NO_CHANGE,0,0.05,NO_CHANGE,5);
		}
		wait(50);
	}
	wait(60);
	if(ObjMove_GetX(enemy) < 192){
		Obj_SetValue(enemy,"Anim",1);
		ObjMove_SetAngle(enemy,220);
	}
	else{
		Obj_SetValue(enemy,"Anim",2);
		ObjMove_SetAngle(enemy,-40);
	}
	ObjMove_SetAcceleration(enemy,0.05);
	ObjMove_SetMaxSpeed(enemy,3);
	wait(120);
	Obj_Delete(enemy);
}

task RainFairyBehavior(enemy,extra){
	AnimateSmallFairy(enemy,0);
	ObjMove_SetDestAtWeight(enemy,extra[0],extra[1],10,4);
	if(extra[0] > ObjMove_GetX(enemy)){Obj_SetValue(enemy,"Anim",4);}
	else{Obj_SetValue(enemy,"Anim",3);}
	wait(60);
	Obj_SetValue(enemy,"Anim",0);
	wait(40);
	let diff = GetAreaCommonData("GameState","Difficulty",1);
	let diff_count = [2,2,3,5][diff];
	let diff_expand = [0,0.5,1,1.2][diff];
	let diff_speed = [1.5,2,2,2][diff];
	ascent(i in 0..5){
		PlaySFX(SFX_SHOT1);
		if(Obj_IsDeleted(enemy)){break;}
		let split = 360/diff_count;
		let n = rand(0,split);
		let a = GetAngleToPlayer(enemy);
		ascent(j in 0..diff_count){
			let shot = SPShotA2(ObjMove_GetX(enemy),ObjMove_GetY(enemy),diff_speed+i*diff_expand,n+j*split,-0.1,0,BALL_BLUE,5);
			RainTransform(shot,a,j);
		}
		wait(60);
	}
	wait(120);
	ObjMove_SetAngle(enemy,270);
	ObjMove_SetAcceleration(enemy,0.05);
	ObjMove_SetMaxSpeed(enemy,3);
	wait(240);
	Obj_Delete(enemy);

	task RainTransform(shot,angle,delay){
		wait(rand(30,40));
		angle = GetAngleToPlayer(shot);
		if(Obj_IsDeleted(shot)){return;}
		let rain = SPShotA2(ObjMove_GetX(shot),ObjMove_GetY(shot),2,angle,0.1,4,DROP_BLUE,10);
		ObjMove_AddPatternB2(rain,0,NO_CHANGE,NO_CHANGE,0,0.05,0,5);

		//Could use this later
		//let dir = floor((((ObjMove_GetAngle(shot))+90)%360)/180)*2-1;
		//ObjMove_AddPatternB2(rain,10,NO_CHANGE,NO_CHANGE,0.05*dir,0.2,rand(-0.5,0.5),4);
		
		descent(i in 0..10){
			ObjRender_SetAlpha(shot,i*25);
		}
		Obj_Delete(shot);
	}
}

task PlainFairyBehavior(enemy,extra){
	AnimateSmallFairy(enemy,1);
	if((extra[0]+90)%360 > 180){Obj_SetValue(enemy,"Anim",3);}
	else{Obj_SetValue(enemy,"Anim",4);}
	ObjMove_SetAngle(enemy,extra[0]);
	ObjMove_SetSpeed(enemy,2);
	ObjMove_AddPatternB2(enemy,0,NO_CHANGE,NO_CHANGE,0,-0.01,0,-3);
	let angle;
	let shot;
	let shift;
	let diff = GetAreaCommonData("GameState","Difficulty",1);
	let diff_count = [2,4,6,8][diff];

	shift = 180/diff_count;
	while(!Obj_IsDeleted(enemy) && ObjMove_GetY(enemy) > 0){
		angle = rand(-20,20);
		ascent(i in 0..diff_count){
			SPShotA2(ObjMove_GetX(enemy),ObjMove_GetY(enemy),1,angle+i*shift,0.1,3,RBALL_GREEN,15);
		}
		ascent(i in 1..diff_count+1){
			shot = SPShotA2(ObjMove_GetX(enemy),ObjMove_GetY(enemy),1,angle-i*shift,0.1,4.5,SCALE_YELLOW,15);
			ObjMove_AddPatternB2(shot,20,NO_CHANGE,NO_CHANGE,0,0.1,0,4);
		}
		PlaySFX(SFX_SHOT1);
		wait(60);
	}

	Obj_Delete(enemy);
}

task RainThingyBehavior(enemy,extra){
	ObjMove_SetPosition(enemy,192,-120);
	ObjMove_SetAngle(enemy,90);
	//ObjMove_SetSpeed(enemy,0.1);
	let angle = rand(0,360);
	let dist = 60;
	let raining = true;
	Obj_SetValue(enemy,"BossTime",false);
	CheckForBoss;
	let diff = GetAreaCommonData("GameState","Difficulty",1);
	let diff_delay = [20,15,12,10][diff];
	while(!Obj_IsDeleted(enemy)){
		loop(diff_delay){
			if(Obj_IsDeleted(enemy)){break;}
			angle += 1;
			ascent(i in 0..6){
				let shot = SPShotA1(ObjMove_GetX(enemy)+cos(angle+i*60)*dist*1.5,ObjMove_GetY(enemy)+sin(angle+i*60)*dist,0,0,RBALL_CYAN,7);
				InstaDelete(shot);
				ObjShot_SetAutoDelete(shot,false);
			}
			yield;
		}
		if(raining && !Obj_IsDeleted(enemy)){
			ascent(i in 0..6){
				let shot = SPShotB2(ObjMove_GetX(enemy)+cos(angle+i*60)*90,ObjMove_GetY(enemy)+sin(angle+i*60)*60,cos(angle+i*60)*2,-absolute(sin(angle+i*60))*2,0,0.1,0,4,DROP_CYAN-i%2,10);
				ObjShot_SetAutoDelete(shot,false);
				StageRain(shot);
			}
		}
	}

	task CheckForBoss{
		while(!Obj_GetValue(enemy,"BossTime")){yield;}
		StopRaining;
		let boss = GetEnemyBossObjectID[0];
		loop(150){
			ObjMove_SetPosition(enemy,ObjMove_GetX(boss),ObjMove_GetY(boss));
			yield;
		}
		ascent(i in 0..31){
			dist = 60-i*2;
			ObjMove_SetPosition(enemy,ObjMove_GetX(boss)+i/2,ObjMove_GetY(boss)-i/3);
			yield;
		}
		wait(30);
		Obj_Delete(enemy);

		task StopRaining{
			wait(100);
			raining = false;
		}
	}

	task InstaDelete(obj){
		ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
		wait(5);
		Obj_Delete(obj);
	}

	task StageRain(shot){
		while(ObjMove_GetY(shot) < 448 && !Obj_IsDeleted(shot)){yield;}
		ObjShot_SetDeleteFrame(shot,0);
	}

}

task SuperRainFairyBehavior(enemy,extra){
	AnimateBigFairy(enemy,1);
	ObjMove_SetDestAtWeight(enemy,ObjMove_GetX(enemy),extra[0],10,4);
	wait(60);
	let diff = GetAreaCommonData("GameState","Difficulty",1);
	let diff_count = [2,4,5,6][diff];
	let diff_waves = [6,6,8,10][diff];
	ascent(i in 0..diff_waves){
		PlaySFX(SFX_SHOT1);
		if(Obj_IsDeleted(enemy)){break;}
		let split = 360/diff_count;
		let n = rand(0,split);
		ascent(j in 0..diff_count){
			let shot = SPShotA2(ObjMove_GetX(enemy),ObjMove_GetY(enemy),3+i/2,n+j*split,-0.1,0,BALL_BLUE,5);
			RainTransform(shot,j);
		}
		wait(20);
	}
	wait(120);
	ObjMove_SetAngle(enemy,270);
	ObjMove_SetAcceleration(enemy,0.1);
	ObjMove_SetMaxSpeed(enemy,2);
	wait(240);
	Obj_Delete(enemy);

	task RainTransform(shot,delay){
		ObjShot_SetAutoDelete(shot,false);
		wait(20);
		if(Obj_IsDeleted(shot)){return;}
		let rain = SPShotA1(ObjMove_GetX(shot),ObjMove_GetY(shot),ObjMove_GetSpeed(shot),ObjMove_GetAngle(shot),DROP_BLUE,10);
		ObjShot_SetAutoDelete(rain,false);
		CheckFall(rain);

		let dir = floor((((ObjMove_GetAngle(shot))+90)%360)/180)*2-1;
		ObjMove_AddPatternB2(rain,10,NO_CHANGE,NO_CHANGE,0.05*dir,0.2,rand(-0.5,0.5),5);
		
		descent(i in 0..10){
			ObjRender_SetAlpha(shot,i*25);
		}
		Obj_Delete(shot);

		task CheckFall(obj){
			while(!Obj_IsDeleted(obj) && ObjMove_GetY(obj) < 0){yield;}
			ObjShot_SetAutoDelete(obj,true);
		}
	}
}

//Keeping this because I have yet to update the rainfall fairy
/*task StageEnemy(x,y,type,extra){
	let enemy = ObjEnemy_Create(OBJ_ENEMY);
	ObjEnemy_Regist(enemy);
	ObjMove_SetPosition(enemy,x,y);
	alternative(type)
	case(FAIRY_TEST){ //[xdest,ydest,color]

	}
	case(FAIRY_RAIN){ //[destx,desty,dir] //todo: implement variable direction
		AnimateBigFairy(enemy,1);
		ObjEnemy_SetLife(enemy,200);
		Obj_SetValue(enemy,"Anim",4);
		ObjMove_SetDestAtWeight(enemy,extra[0],extra[1],10,4);
		extra[0] = extra[0] - 5;
		let angle = rand(0,360);
		let n = 0;
		let continueRain = true;
		RainSpiral;
		while(ObjMove_GetX(enemy) < extra[0] && !Obj_IsDeleted(enemy)){yield;}
		if(!Obj_IsDeleted(enemy)){
			Obj_SetValue(enemy,"Anim",0);
			while(angle%60 >= 5){yield;}
			continueRain = false;
			wait(180);
			ObjMove_SetAngle(enemy,270);
			ObjMove_SetAcceleration(enemy,0.05);
			ObjMove_SetMaxSpeed(enemy,3);
			wait(120);
			Obj_Delete(enemy);
		}

		task RainSpiral{
			while(continueRain){
				loop(4){
					if(Obj_IsDeleted(enemy)){
						continueRain = false;
						break;
					}
					ascent(j in 0..6){
						let trail = CreateShotA1(ObjMove_GetX(enemy)+cos(angle+j*60)*40,ObjMove_GetY(enemy)+sin(angle+j*60)*40,0,90,DS_RICE_S_BLUE,15);
						InstaDelete(trail);
					}
					angle += 5;
					wait(2);
				}
				if(Obj_IsDeleted(enemy)){break;}
				ascent(j in 0..3){
					let shot = CreateShotA1(ObjMove_GetX(enemy)+cos(angle+j*120+n%2*60)*40,ObjMove_GetY(enemy)+sin(angle+j*120+n%2*60)*40,rand(2,3),90,DS_RICE_S_BLUE,10);
					ObjMove_AddPatternB2(shot,0,NO_CHANGE,NO_CHANGE,0.01,0,rand(2,4),0);
				}
				n++;
			}
			ascent(i in 0..60){
				if(Obj_IsDeleted(enemy)){break;}
				ascent(j in 0..6){
					let trail = CreateShotA1(ObjMove_GetX(enemy)+cos(angle+j*60)*(40+i*7),ObjMove_GetY(enemy)+sin(angle+j*60)*(40+i),0,90,DS_RICE_S_BLUE,15);
					InstaDelete(trail);
				}
				if(i%5 == 0){
					ascent(j in 0..6){
						let shot = CreateShotA1(ObjMove_GetX(enemy)+cos(angle+j*60)*(40+i*7),ObjMove_GetY(enemy)+sin(angle+j*60)*(40+i),rand(2,3),90,DS_RICE_S_BLUE,10);
						ObjMove_AddPatternB2(shot,0,NO_CHANGE,NO_CHANGE,0.01,0,rand(2,4),0);
					}
				}
				yield;
			}
		}

		task InstaDelete(shot){
			wait(ObjShot_GetDelay(shot)-1);
			Obj_Delete(shot);
		}
	}

	task SpawnRaindrops(xpos,ypos){
		alternative(type)
			case(FAIRY_TEST){
				ascent(i in -1..2){
					CreateShotRaindrop(xpos,ypos,cos(90+i*120)*0.2,sin(90+i*120),0,0.1,0,2,RAINDROP_RED-absolute(i)*2,5);
				}
			}
	}
}*/